{"version":3,"sources":["webpack:///./src/assets/image/close.png","webpack:///./src/utils/websocket.js","webpack:///./src/components/setting.vue?7623","webpack:///./src/components/setting.vue","webpack:///./src/components/setting.vue?f325"],"names":["module","exports","socket","lockReconnet","wsUrl","isReconnet","globalCallback","createSocket","url","window","WebSocket","initSocket","e","reconnet","sendMsg","data","callback","readyState","setTimeout","JSON","stringify","send","onmessage","ev","onopen","ElMessage","message","type","onerror","onclose","closeSocket","close","getSocketState","class","title","outSatate","closeTag","src","closeImg","outUser","on","handlerCancel","checked","props","msg","Boolean","setup","context","router","strongTips","event","console","log","target","localStorage","setItem","value","emit","confirm","confirmButtonText","cancelButtonText","then","push","path","catch","getItem","render","__scopeId"],"mappings":"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","file":"js/chunk-04966e1a.125b7c8c.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/close.1e625a63.png\";","import {\r\n    ElMessage\r\n} from 'element-plus';\r\nlet socket = null;\r\nlet lockReconnet = false;\t//避免重复连接\r\nconst wsUrl = '';\r\nlet isReconnet = false;\r\nlet globalCallback = null;\t//把要发送给socket的数据和处理socket返回数据的回调保存起来\r\n\r\nlet createSocket = url => {\t//创建socket\r\n    try {\r\n        if ('WebSocket' in window) {\r\n            socket = new WebSocket(url)\r\n        }\r\n        //Vue.prototype.socket = socket\t//需要主动关闭的话就可以直接调用this.socket.close()进行关闭，不需要的话这个可以去掉\r\n        initSocket()\r\n    } catch (e) {\r\n        reconnet(url)\r\n    }\r\n\r\n}\r\n\r\nlet sendMsg = (data, callback) => {\r\n    if (socket.readyState === 1) {\r\n        globalCallback = callback;\r\n        data = JSON.stringify(data);\r\n        socket.send(data);\r\n    } else {\r\n        setTimeout(() => {\r\n            // console.log(socket, '等待socket链接成功')\r\n            sendMsg(data, callback)\r\n        }, 5500)\r\n        return false\r\n    }\r\n    socket.onmessage = ev => {\r\n        callback && callback(ev)\r\n    }\r\n\r\n\r\n    // globalCallback = data\r\n    // socket.send(data);\r\n    // //发送数据,接收数据\r\n    // socket.onmessage = ev => {\r\n    //     callback && callback(ev)\r\n    // }\r\n\r\n}\r\n\r\nlet initSocket = () => {\t//初始化websocket\r\n    socket.onopen = () => {\r\n        if (socket.readyState === 1) {\r\n            ElMessage({\r\n                message: 'websocket连接成功',\r\n                type: 'success'\r\n            })\r\n        }\r\n        //heartCheck.reset().start()\t//心跳检测\r\n\r\n        if (isReconnet) {//执行全局回调函数\r\n            //console.log('websocket重新连接了')\r\n            sendMsg(globalCallback)\r\n            isReconnet = false\r\n        }\r\n        // socket.send(JSON.stringify({\r\n        //     \"cmd\": \"SET_AREA\",\r\n        //     \"monitorAreaNo\": sessionStorage.getItem(\"area\")\r\n        // }))\r\n\r\n    }\r\n\r\n    // socket.onmessage = () => {\r\n    //     // sessionStorage.setItem(\"\", host);\r\n    //     // console.log(ev,'连接正常')\r\n    //     //heartCheck.reset().start()\t//心跳检测\r\n    // }\r\n\r\n    socket.onerror = () => {\r\n        ElMessage({\r\n            message: 'websocket连接出错',\r\n            type: 'error'\r\n        })\r\n        reconnet(wsUrl)\r\n    }\r\n\r\n\r\n\r\n    socket.onclose = () => {\r\n        ElMessage({\r\n            message: 'websocket连接关闭',\r\n            type: 'error'\r\n        })\r\n        reconnet(wsUrl)\r\n    }\r\n}\r\nlet closeSocket = () => {\t//发送数据,接收数据\r\n    socket.close();\r\n    socket.onclose = () => {\r\n        ElMessage({\r\n            message: 'websocket连接关闭',\r\n            type: 'error'\r\n        })\r\n        reconnet(wsUrl)\r\n    }\r\n}\r\nlet getSocketState = () => {\r\n    return socket.readyState\r\n}\r\nlet reconnet = url => {\t//重新连接websock函数\r\n    if (lockReconnet)\r\n        return false\r\n\r\n    isReconnet = true;\r\n    lockReconnet = true\r\n    setTimeout(() => {\r\n        createSocket(url)\r\n        lockReconnet = false\r\n    }, 2000)\r\n}\r\n\r\n// let heartCheck = {\t//心跳检测\r\n// \ttimeout: 60*1000,\r\n// \ttimeoutObj: null,\r\n// \tserverTimeoutObj: null,\r\n// \treset(){\r\n// \t\tclearTimeout(this.timeoutObj)\r\n// \t\tclearTimeout(this.serverTimeoutObj)\r\n// \t\treturn this;\r\n// \t},\r\n// \tstart(){\r\n// \t\tlet that = this;\r\n// \t\tthis.timeoutObj = setTimeout(()=>{\r\n// \t\t\t//发送数据，如果onmessage能接收到数据，表示连接正常,然后在onmessage里面执行reset方法清除定时器\r\n// \t\t\tsocket.send('heart check')\r\n// \t\t\tthis.serverTimeoutObj = setTimeout(()=>{\r\n// \t\t\t\tsocket.close()\r\n// \t\t\t},that.timeout)\r\n// \t\t},this.timeout)\r\n// \t}\r\n// }\r\n\r\n\r\n\r\nexport { sendMsg, createSocket, closeSocket, getSocketState }","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./setting.vue?vue&type=style&index=0&id=2d2f3936&scoped=true&lang=scss\"","<template>\r\n  <div>\r\n    <div class=\"setting-header\">\r\n      <div class=\"header-l\">软件设置</div>\r\n      <div :class=\"[{ transformOut: !outSatate }]\" class=\"header-r\">\r\n        <img @click=\"closeTag\" title=\"关闭设置\" :src=\"closeImg\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"setting-body\">\r\n      <div class=\"body-left\">\r\n        <div class=\"userAcount\" title=\"区域\">区域</div>\r\n        <div class=\"userTheam\" title=\"强提醒\">强提醒</div>\r\n      </div>\r\n      <div class=\"body-right\">\r\n        <div @click=\"outUser\" class=\"userAcount-setting\" title=\"重新设置\">\r\n          重新设置\r\n        </div>\r\n        <div class=\"userStrongTips\">\r\n          <label class=\"switch\">\r\n            <input v-if=\"on == false\" @click=\"handlerCancel\" type=\"checkbox\" />\r\n            <input\r\n              v-if=\"on == true\"\r\n              @click=\"handlerCancel\"\r\n              checked\r\n              type=\"checkbox\"\r\n            />\r\n            <span></span>\r\n          </label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, ref } from \"vue\";\r\nimport { ElMessageBox } from \"element-plus\";\r\nimport { ElMessage } from \"element-plus\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { closeSocket } from \"../utils/websocket\";\r\nexport default {\r\n  props: {\r\n    msg: Boolean,\r\n  },\r\n  setup(props, context) {\r\n    let closeImg = ref(require(\"../assets/image/close.png\"));\r\n    let router = useRouter();\r\n    let outSatate = ref(null);\r\n    let strongTips = ref(false);\r\n    let on = ref(false);\r\n    const handlerCancel = (event) => {\r\n      console.log(event.target.checked);\r\n      localStorage.setItem(\"checkState\", event.target.checked);\r\n    };\r\n    const closeTag = () => {\r\n      outSatate.value = false;\r\n      context.emit(\"getSetting\", false);\r\n    };\r\n    const outUser = () => {\r\n      ElMessageBox.confirm(\"此操作将返回区域选择页面, 是否继续?\", \"重新设置\", {\r\n        confirmButtonText: \"确定\",\r\n        cancelButtonText: \"取消\",\r\n        type: \"warning\",\r\n      })\r\n        .then(() => {\r\n          closeSocket();\r\n          router.push({ path: \"/start\" });\r\n        })\r\n        .catch(() => {\r\n          ElMessage({\r\n            type: \"info\",\r\n            message: \"用户取消\",\r\n          });\r\n        });\r\n    };\r\n    onMounted(() => {\r\n      outSatate.value = props.msg;\r\n      if (localStorage.getItem(\"checkState\")) {\r\n        on.value = localStorage.getItem(\"checkState\");\r\n      }\r\n    });\r\n    return {\r\n      closeImg, //关闭图片\r\n      router, //路由\r\n      outSatate, //关闭时的状态\r\n      strongTips, //强提醒开关值\r\n      closeTag, //关闭子组件..传送数据\r\n      outUser, //退出账号.\r\n      handlerCancel, //check\r\n      on, //check默认状态\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n@import \"../assets/css/setting.scss\";\r\n</style>","import { render } from \"./setting.vue?vue&type=template&id=2d2f3936&scoped=true\"\nimport script from \"./setting.vue?vue&type=script&lang=js\"\nexport * from \"./setting.vue?vue&type=script&lang=js\"\n\nimport \"./setting.vue?vue&type=style&index=0&id=2d2f3936&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-2d2f3936\"\n\nexport default script"],"sourceRoot":""}